/* In this assignment, and all future ones, we use Gradle, a
 * build manager.
 *
 * The purpose of build managers like Gradle is to standardize and simplify
 * the process of managing a Java project. This is useful because different
 * IDEs like Eclipse or IntelliJ all have different standards and conventions
 * on how they expect their projects to be structured and organized.
 *
 * Having to manage settings for n different IDEs can be a pain, so we
 * simplify by telling them to all use Gradle instead.
 *
 * Other examples of build managers include Ant and Maven.
 *
 * You do not need to know anything about Gradle or build managers to complete
 * this project, but if you're curious and want to learn more, take a look
 * at guides and documentation on the Gradle website:
 * https://guides.gradle.org/creating-new-gradle-builds/
 * https://docs.gradle.org/current/userguide/tutorial_using_tasks.html
 * https://docs.gradle.org/current/userguide/building_java_projects.html
 */

// Here, we list some libraries that we use to augment this build script
// itself.
plugins {
    // Use the Java plugin to add support for Java
    id 'java'
    // Use IDE plugins so we can generate IDE project files
    id 'eclipse'
    id 'idea'
    // Include the checkstyle plugin for terminal usage
    id 'checkstyle'
    // Use a plugin for nicer terminal JUnit output
    id 'com.adarshr.test-logger' version '1.7.0'
}

// This sets the version of Gradle we'll be using.
wrapper {
    gradleVersion = '5.4.1'
    distributionType = Wrapper.DistributionType.BIN
}

// This project uses a few 3rd party libraries. Rather than downloading
// and installing them manually, which can be highly error-prone, we
// have Gradle do it for us. In the "repositories" section, we specify
// where we want to search for these 3rd party packages.
repositories {
    // Maven central is a website containing a large collection of
    // 3rd party libraries. It was originally meant to be used with the
    // Maven build tool, but it's so comprehensive that other build tools
    // decided to just use this one instead of building a similar website.
    mavenCentral()
}

// Here, we list all the different libraries we plan on using.
// Gradle will automatically download them from the repositories listed above.
dependencies {
    // We use jfreechart to help us chart graphs and other visualizations.
    compile group: 'org.jfree', name: 'jfreechart', version: '1.0.19'

    // We use jol to help us extract the approximate size of Java objects
    compile group: 'org.openjdk.jol', name: 'jol-core', version: '0.9'

    // We use JUnit as our unit testing framework.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    // We use Hamcrest to help us write JUnit tests.
    testImplementation 'org.hamcrest:hamcrest:2.1'
}

// Enable warnings
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

// Configure pretty test output format
testlogger {
    theme 'standard'
    showExceptions true
    showStackTraces false
    showFullStackTraces false
    showCauses false
    showSummary false
    slowThreshold 60000
    showStandardStreams false
    showPassedStandardStreams false
    showSkippedStandardStreams false
    showFailedStandardStreams false
}

// Configure tests to run
test {
    def profileString = System.properties['test.profile'] ?: ''

    useJUnitPlatform {
        if (profileString) {
            includeTags = profileString.split(',')
        }
    }

    testLogging {
        events = ['passed', 'skipped', 'failed']
        showStandardStreams = false
        exceptionFormat = "full"
    }

    reports {
        html.enabled = false
        junitXml.enabled = false
    }
}

// Configure Checkstyle
checkstyle {
    toolVersion = '8.22'
}

checkstyleMain {
    include 'datastructures/lists/DoubleLinkedList.java'
    include 'datastructures/dictionaries/ArrayDictionary.java'

    reports {
        html.enabled = false
        xml.enabled = false
    }
}

checkstyleTest {
    include 'datastructures/lists/TestDoubleLinkedListDelete.java'

    reports {
        html.enabled = false
        xml.enabled = false
    }
}
